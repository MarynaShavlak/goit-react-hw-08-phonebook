{"version":3,"file":"static/js/969.17f6443c.chunk.js","mappings":"+NAoHA,UAzFiB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAmBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC/BC,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1BC,GAAYJ,EAAAA,EAAAA,IAAYK,EAAAA,IACxBC,GAAQN,EAAAA,EAAAA,IAAYO,EAAAA,IACpBC,GAASR,EAAAA,EAAAA,KAAYS,EAAAA,EAAAA,GAAaC,EAAAA,GAAAA,WACxC,GAOIC,EAAAA,EAAAA,IAAeT,EAAaQ,EAAAA,GAAAA,UAN9BE,EADF,EACEA,kBACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,mBACAC,EALF,EAKEA,qBACAC,EANF,EAMEA,qBAEFC,EAAAA,EAAAA,YAAU,WACHhB,GACHP,GAASwB,EAAAA,EAAAA,MAGZ,GAAE,CAACxB,IACJ,IAAMyB,IAAeZ,KAAW,OAACN,QAAD,IAACA,IAAAA,EAAamB,QAa9C,OACE,iCACE,SAAC,KAAD,KACA,SAAC,KAAD,WACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,SAAUC,EAAAA,EAAAA,QACVC,KAAMd,EAAAA,GAAAA,SACNe,MAAOvB,EACPwB,mBAAoB,kBAAM7B,EAAS,GAAD,OAAIa,EAAAA,GAAAA,QAAlB,EACpBE,kBAAmBA,EACnBC,kBAAmBA,EACnBC,cAAeA,EACfC,mBAAoBA,EACpBC,qBAAsBA,IAGvBZ,GACC,SAAC,KAAD,IACEE,IAAuB,IAAdF,GACX,SAAC,KAAD,IACkB,OAAhBL,QAAgB,IAAhBA,GAAAA,EAAkBsB,QACpB,iCACE,SAAC,KAAD,KACA,SAAC,KAAD,CAEEI,MAAO1B,EACP4B,WAvCM,SAAAC,GACpB,OACE,SAAC,KAAD,CACEA,QAASA,EACThB,kBAAmBA,EACnBE,cAAeA,EACfG,oBAAqBA,GAG1B,EA+BeO,KAAMd,EAAAA,GAAAA,cAGRU,GACF,SAAC,KAAD,CACES,QAAO,2FAAsFrB,EAAtF,QAGT,iCACE,SAAC,KAAD,CAAcqB,QAAQ,yFACtB,SAAC,KAAD,CACEC,KAAK,SACLC,QAAS,kBAAMlC,EAAS,GAAD,OAAIa,EAAAA,GAAAA,QAAlB,EAFX,SAGC,4BAUhB,C","sources":["pages/Contacts/Contacts.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  ContentWrapper,\n  Main,\n  Button,\n} from 'shared/commonStyledComponents.jsx';\nimport {\n  ItemsList,\n  Loader,\n  AppBar,\n  ContactSortMenu,\n  Contact,\n} from 'components';\nimport { Section, ErrorMessage, Notification, ActionsMenu } from 'shared';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectFilteredContacts,\n  fetchContacts,\n} from 'redux/contacts';\nimport { selectFilter } from 'redux/filters';\nimport { ITEM_CATEGORIES, ROUTES } from 'constants';\nimport { useMultiSelect } from 'hooks';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const allContacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilter(ROUTES.CONTACTS));\n  const {\n    isMultiSelectOpen,\n    toggleMultiSelect,\n    selectedItems,\n    resetSelectedItems,\n    handleSelectAllClick,\n    updateSelectedItems,\n  } = useMultiSelect(allContacts, ROUTES.CONTACTS);\n  useEffect(() => {\n    if (!allContacts) {\n      dispatch(fetchContacts());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n  const isFiltered = !!filter && !!allContacts?.length;\n\n  const renderContact = contact => {\n    return (\n      <Contact\n        contact={contact}\n        isMultiSelectOpen={isMultiSelectOpen}\n        selectedItems={selectedItems}\n        updateSelectedItems={updateSelectedItems}\n      />\n    );\n  };\n\n  return (\n    <>\n      <AppBar />\n      <Main>\n        <Section>\n          <ContentWrapper>\n            <ActionsMenu\n              category={ITEM_CATEGORIES.CONTACT}\n              page={ROUTES.CONTACTS}\n              items={allContacts}\n              handleMainBtnClick={() => navigate(`${ROUTES.CREATE}`)}\n              isMultiSelectOpen={isMultiSelectOpen}\n              toggleMultiSelect={toggleMultiSelect}\n              selectedItems={selectedItems}\n              resetSelectedItems={resetSelectedItems}\n              handleSelectAllClick={handleSelectAllClick}\n            />\n\n            {isLoading ? (\n              <Loader />\n            ) : error && isLoading === false ? (\n              <ErrorMessage />\n            ) : filteredContacts?.length ? (\n              <>\n                <ContactSortMenu />\n                <ItemsList\n                  // state={{ from: location }}\n                  items={filteredContacts}\n                  renderItem={renderContact}\n                  page={ROUTES.CONTACTS}\n                />\n              </>\n            ) : isFiltered ? (\n              <Notification\n                message={`No contacts found matching your search criteria for names or numbers containing '${filter}'`}\n              />\n            ) : (\n              <>\n                <Notification message=\"Add your first contact today and discover the amazing possibilities of Phone Genie!\" />\n                <Button\n                  type=\"button\"\n                  onClick={() => navigate(`${ROUTES.CREATE}`)}\n                >\n                  Add contact\n                </Button>\n              </>\n            )}\n          </ContentWrapper>\n        </Section>\n      </Main>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["dispatch","useDispatch","navigate","useNavigate","filteredContacts","useSelector","selectFilteredContacts","allContacts","selectContacts","isLoading","selectIsLoading","error","selectError","filter","selectFilter","ROUTES","useMultiSelect","isMultiSelectOpen","toggleMultiSelect","selectedItems","resetSelectedItems","handleSelectAllClick","updateSelectedItems","useEffect","fetchContacts","isFiltered","length","category","ITEM_CATEGORIES","page","items","handleMainBtnClick","renderItem","contact","message","type","onClick"],"sourceRoot":""}