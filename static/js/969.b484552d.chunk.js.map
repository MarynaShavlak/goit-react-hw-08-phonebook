{"version":3,"file":"static/js/969.b484552d.chunk.js","mappings":"qNAqFA,UAtEiB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,IACxBC,GAAQJ,EAAAA,EAAAA,IAAYK,EAAAA,IAC1B,GAOIC,EAAAA,EAAAA,IAAeP,EAAaQ,EAAAA,GAAAA,UAN9BC,EADF,EACEA,kBACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,mBACAC,EALF,EAKEA,qBACAC,EANF,EAMEA,qBAGFC,EAAAA,EAAAA,YAAU,WACHf,GACHJ,GAASoB,EAAAA,EAAAA,MAGZ,GAAE,CAACpB,IAgBJ,OACE,iCACE,SAAC,KAAD,KACA,SAAC,KAAD,WACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEqB,KAAMT,EAAAA,GAAAA,SACNU,MAAOlB,EACPmB,mBAvBqB,WAC/BrB,EAAS,GAAD,OAAIU,EAAAA,GAAAA,QACb,EAsBWC,kBAAmBA,EACnBC,kBAAmBA,EACnBC,cAAeA,EACfC,mBAAoBA,EACpBC,qBAAsBA,IAGvBV,GACC,SAAC,KAAD,IACEE,IAAuB,IAAdF,GACX,SAAC,KAAD,KAEA,SAAC,KAAD,CACEc,KAAMT,EAAAA,GAAAA,SACNY,cAnCQ,SAAAC,GACpB,OACE,SAAC,KAAD,CACEA,QAASA,EACTZ,kBAAmBA,EACnBE,cAAeA,EACfG,oBAAqBA,GAG1B,aAkCF,C","sources":["pages/Contacts/Contacts.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { ContentWrapper, Main } from 'shared/commonStyledComponents.jsx';\nimport { Loader, AppBar, Contact } from 'components';\nimport { Section, ErrorMessage, ActionsMenu, ItemsListSection } from 'shared';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  fetchContacts,\n} from 'redux/contacts';\nimport { ROUTES } from 'constants';\nimport { useMultiSelect } from 'hooks';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const allContacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const {\n    isMultiSelectOpen,\n    toggleMultiSelect,\n    selectedItems,\n    resetSelectedItems,\n    handleSelectAllClick,\n    updateSelectedItems,\n  } = useMultiSelect(allContacts, ROUTES.CONTACTS);\n\n  useEffect(() => {\n    if (!allContacts) {\n      dispatch(fetchContacts());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  const openCreateNewContactPage = () => {\n    navigate(`${ROUTES.CREATE}`);\n  };\n  const renderContact = contact => {\n    return (\n      <Contact\n        contact={contact}\n        isMultiSelectOpen={isMultiSelectOpen}\n        selectedItems={selectedItems}\n        updateSelectedItems={updateSelectedItems}\n      />\n    );\n  };\n\n  return (\n    <>\n      <AppBar />\n      <Main>\n        <Section>\n          <ContentWrapper>\n            <ActionsMenu\n              page={ROUTES.CONTACTS}\n              items={allContacts}\n              handleMainBtnClick={openCreateNewContactPage}\n              isMultiSelectOpen={isMultiSelectOpen}\n              toggleMultiSelect={toggleMultiSelect}\n              selectedItems={selectedItems}\n              resetSelectedItems={resetSelectedItems}\n              handleSelectAllClick={handleSelectAllClick}\n            />\n\n            {isLoading ? (\n              <Loader />\n            ) : error && isLoading === false ? (\n              <ErrorMessage />\n            ) : (\n              <ItemsListSection\n                page={ROUTES.CONTACTS}\n                renderContact={renderContact}\n              />\n            )}\n          </ContentWrapper>\n        </Section>\n      </Main>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["dispatch","useDispatch","navigate","useNavigate","allContacts","useSelector","selectContacts","isLoading","selectIsLoading","error","selectError","useMultiSelect","ROUTES","isMultiSelectOpen","toggleMultiSelect","selectedItems","resetSelectedItems","handleSelectAllClick","updateSelectedItems","useEffect","fetchContacts","page","items","handleMainBtnClick","renderContact","contact"],"sourceRoot":""}