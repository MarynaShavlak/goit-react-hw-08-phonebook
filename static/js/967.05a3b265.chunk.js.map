{"version":3,"file":"static/js/967.05a3b265.chunk.js","mappings":"oSAEaA,EAA4B,SAAAC,GACvC,IAAKA,EAAgBC,OAAQ,OAAO,KACpC,IACMC,EADeF,EAAgBG,KAAI,SAAAC,GAAO,OAAIA,EAAQC,IAAZ,IACPC,KAAK,MAE9C,OACE,UAAC,KAAD,WAAM,gEAC0D,KAC9D,uBAAIJ,MAGT,E,SCVYK,EAAiC,SAC5CC,EACAC,GAEA,OAAKD,EAAqBP,QAKxB,SAAC,KAAD,CACES,MAAOF,EACPG,WAAYF,EACZG,SAAUC,EAAAA,EAAAA,UAPL,IAUV,EC8GD,EA5G0B,WACxB,IAAMC,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,MAAdD,UACFE,EAAoBC,mBAAmBH,GACvCI,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BC,GAASF,EAAAA,EAAAA,IAAYG,EAAAA,KAE3BC,EAAAA,EAAAA,YAAU,WACHL,GACHN,GAASY,EAAAA,EAAAA,MAGZ,GAAE,CAACZ,IAEJ,IAyBMa,GAAkBC,EAAAA,EAAAA,UACtB,kBAAMC,EAAAA,EAAAA,IAAuBX,EAAmBK,EAAhD,GACA,CAACL,EAAmBK,IAGhBO,GAA4BF,EAAAA,EAAAA,UAChC,kBAAMG,EAAAA,EAAAA,IAA6BJ,EAAiBP,EAApD,GACA,CAACO,EAAiBP,IAGpB,GACEY,EAAAA,EAAAA,UAASL,GADX,eAAOnB,EAAP,KAA6ByB,EAA7B,KAEA,GAA4DD,EAAAA,EAAAA,UAAS,IAArE,eAAOE,EAAP,KAA+BC,EAA/B,MAEAV,EAAAA,EAAAA,YAAU,WACRU,EAA0BR,EAE3B,GAAE,IAEH,IAAMS,EAAO,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EAA2B3B,KAAI,SAAAC,GAAO,MAAK,CACzDiC,MAAM,GAAD,OAAKjC,EAAQC,KAAb,aAAsBD,EAAQkC,OAA9B,KACLC,MAAOnC,EAF6C,IAKhDoC,EAAe,CACnBC,QAAS,SAAAC,GAAQ,yBACZA,GADY,IAEfC,OAAO,oBACPC,YAAY,UACZC,aAAc,OACd,UAAW,CACTD,YAAa,WAEfE,UAAW,MARI,EAUjBC,OAAQ,SAACL,EAAUM,GAAX,eAAC,UACJN,GADG,IAENO,gBAAiBD,EAAME,UAAY,UAAY,KAC/CC,MAAOH,EAAMI,WAAa,UAAY,KACtCC,SAAU,QAJJ,GAQV,OACE,iCACE,SAAC,KAAD,CACEC,OAAQC,EAAAA,GAAAA,KAAcA,EAAAA,GAAAA,OACtBC,QAlDwB,kBAC5BC,EAAAA,EAAAA,IAA+BvC,EAAmBS,EADtB,KAoD1B,gCACG5B,EAA0BmC,IAC3B,UAAC,KAAD,WAAM,wCACgC,yBAAG,IAAEhB,EAAkB,WAE7D,SAAC,KAAD,CACEkB,QAASA,EACTsB,SAAU,SAAAX,GAAM,OAjFS3C,EAiFoB2C,EAAOR,MAhF1DN,GAAwB,SAAA0B,GAAY,wBAAQA,GAAR,CAAsBvD,GAAtB,SACpCU,GAAS8C,EAAAA,EAAAA,IAAkB,CAAEC,MAAO3C,EAAmBd,QAAAA,KAFxB,IAAAA,CAiFT,EAChB0D,OAAQtB,IAGTjC,EACCC,GAjFoB,SAAAJ,GACPI,EAChBL,KAAI,SAAA4D,GAAE,OAAIA,EAAGC,EAAP,IACNC,SAAS7D,EAAQ4D,MAGlB/B,EACEzB,EAAqB0D,QAAO,SAAAH,GAAE,OAAIA,EAAGC,KAAO5D,EAAQ4D,EAAtB,KAEhClD,GACEqD,EAAAA,EAAAA,GAAuB,CACrBN,MAAO3C,EACPd,QAAAA,KAIP,SAuEF,C","sources":["pages/ManageGroupMember/helpers/renderExistedContactsText.js","pages/ManageGroupMember/helpers/renderContactsToAddInGroupList.js","pages/ManageGroupMember/ManageGroupMember.jsx"],"sourcesContent":["import { Text } from 'shared/commonStyledComponents.jsx';\n\nexport const renderExistedContactsText = existedContacts => {\n  if (!existedContacts.length) return null;\n  const contactNames = existedContacts.map(contact => contact.name);\n  const contactsNamesString = contactNames.join(', ');\n\n  return (\n    <Text>\n      The following contacts have already been added to the group :{' '}\n      <b>{contactsNamesString}</b>\n    </Text>\n  );\n};\n","import { LabelList } from 'shared';\nimport { ITEM_CATEGORIES } from 'constants';\n\nexport const renderContactsToAddInGroupList = (\n  contactsToAddInGroup,\n  handleContactSelect\n) => {\n  if (!contactsToAddInGroup.length) {\n    return null;\n  }\n\n  return (\n    <LabelList\n      items={contactsToAddInGroup}\n      handleItem={handleContactSelect}\n      category={ITEM_CATEGORIES.CONTACT}\n    />\n  );\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport Select from 'react-select';\nimport { BackButton } from 'shared';\nimport {\n  selectGroups,\n  deleteContactFromGroup,\n  addContactToGroup,\n} from 'redux/groups';\nimport { selectContacts, fetchContacts } from 'redux/contacts';\nimport { Text } from 'shared/commonStyledComponents.jsx';\nimport { getContactsByGroupName, getAvailableToSelectContacts } from 'utils';\nimport { showGroupManageContactsSuccess } from 'utils/notifications';\nimport {\n  renderExistedContactsText,\n  renderContactsToAddInGroupList,\n} from './helpers';\nimport { ROUTES } from 'constants';\n\nconst ManageGroupMember = () => {\n  const dispatch = useDispatch();\n  const { groupName } = useParams();\n  const originalGroupName = decodeURIComponent(groupName);\n  const allContacts = useSelector(selectContacts);\n  const groups = useSelector(selectGroups);\n\n  useEffect(() => {\n    if (!allContacts) {\n      dispatch(fetchContacts());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  const choseContactToAddInGroup = contact => {\n    setContactsToAddInGroup(prevContacts => [...prevContacts, contact]);\n    dispatch(addContactToGroup({ group: originalGroupName, contact }));\n  };\n\n  const handleContactSelect = contact => {\n    const isSelected = contactsToAddInGroup\n      .map(el => el.id)\n      .includes(contact.id);\n\n    if (isSelected) {\n      setContactsToAddInGroup(\n        contactsToAddInGroup.filter(el => el.id !== contact.id)\n      );\n      dispatch(\n        deleteContactFromGroup({\n          group: originalGroupName,\n          contact,\n        })\n      );\n    }\n  };\n  const handleBackButtonClick = () =>\n    showGroupManageContactsSuccess(originalGroupName, contactsInGroup);\n\n  const contactsInGroup = useMemo(\n    () => getContactsByGroupName(originalGroupName, groups),\n    [originalGroupName, groups]\n  );\n\n  const contactsAvailableToSelect = useMemo(\n    () => getAvailableToSelectContacts(contactsInGroup, allContacts),\n    [contactsInGroup, allContacts]\n  );\n\n  const [contactsToAddInGroup, setContactsToAddInGroup] =\n    useState(contactsInGroup);\n  const [existedContactsInGroup, setExistedContactsInGroup] = useState([]);\n\n  useEffect(() => {\n    setExistedContactsInGroup(contactsInGroup);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const options = contactsAvailableToSelect?.map(contact => ({\n    label: `${contact.name}: ${contact.number} `,\n    value: contact,\n  }));\n\n  const customStyles = {\n    control: provided => ({\n      ...provided,\n      border: `2px solid #abe4ff`,\n      borderColor: `#abe4ff`,\n      borderRadius: '10px',\n      '&:hover': {\n        borderColor: '#f7e643',\n      },\n      boxShadow: null,\n    }),\n    option: (provided, state) => ({\n      ...provided,\n      backgroundColor: state.isFocused ? '#feafe5' : null,\n      color: state.isSelected ? '#100f10' : null,\n      fontSize: '12px',\n    }),\n  };\n\n  return (\n    <>\n      <BackButton\n        pathTo={ROUTES.ROOT + ROUTES.GROUPS}\n        onClick={handleBackButtonClick}\n      />\n      <>\n        {renderExistedContactsText(existedContactsInGroup)}\n        <Text>\n          Choose contacts to add to the group <b>\"{originalGroupName}\"</b>\n        </Text>\n        <Select\n          options={options}\n          onChange={option => choseContactToAddInGroup(option.value)}\n          styles={customStyles}\n        />\n\n        {renderContactsToAddInGroupList(\n          contactsToAddInGroup,\n          handleContactSelect\n        )}\n      </>\n    </>\n  );\n};\n\nexport default ManageGroupMember;\n"],"names":["renderExistedContactsText","existedContacts","length","contactsNamesString","map","contact","name","join","renderContactsToAddInGroupList","contactsToAddInGroup","handleContactSelect","items","handleItem","category","ITEM_CATEGORIES","dispatch","useDispatch","groupName","useParams","originalGroupName","decodeURIComponent","allContacts","useSelector","selectContacts","groups","selectGroups","useEffect","fetchContacts","contactsInGroup","useMemo","getContactsByGroupName","contactsAvailableToSelect","getAvailableToSelectContacts","useState","setContactsToAddInGroup","existedContactsInGroup","setExistedContactsInGroup","options","label","number","value","customStyles","control","provided","border","borderColor","borderRadius","boxShadow","option","state","backgroundColor","isFocused","color","isSelected","fontSize","pathTo","ROUTES","onClick","showGroupManageContactsSuccess","onChange","prevContacts","addContactToGroup","group","styles","el","id","includes","filter","deleteContactFromGroup"],"sourceRoot":""}