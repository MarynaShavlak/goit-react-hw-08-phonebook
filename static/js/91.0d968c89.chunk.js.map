{"version":3,"file":"static/js/91.0d968c89.chunk.js","mappings":"oOAGaA,EAAaC,EAAAA,GAAAA,GAAH,oKAOV,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,QAAxB,IAGLC,EAAYL,EAAAA,GAAAA,GAAH,+E,wDC6FtB,EA3Fe,WACb,OAA4DM,EAAAA,EAAAA,WAAS,GAArE,eAAOC,EAAP,KAA+BC,EAA/B,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBC,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,IAChC,GAOIC,EAAAA,EAAAA,IAAeL,EAAQM,EAAAA,GAAAA,QANzBC,EADF,EACEA,kBACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,mBACAC,EALF,EAKEA,qBACAC,EANF,EAMEA,qBAGFC,EAAAA,EAAAA,YAAU,WACHV,GACHL,GAASgB,EAAAA,EAAAA,MAGZ,GAAE,CAAChB,IAEJ,IAAMiB,EAAyB,WAC7BlB,GAA2BD,EAC5B,EAED,OACE,iCACE,SAAC,KAAD,KACA,SAAC,KAAD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,UACKI,EAAOgB,QACR,gCACG,IACApB,IACC,SAAC,KAAD,CACEqB,OAAQrB,EACRsB,QAASH,KAGb,SAAC,KAAD,CACEI,SAAUC,EAAAA,EAAAA,MACVC,MAAOrB,EACPsB,mBAAoBP,EACpBQ,kBAAmBf,EACnBgB,kBAAmBjB,EACnBkB,KAAMnB,EAAAA,GAAAA,SAEPC,IACC,SAAC,KAAD,CACEmB,iBAAkBf,EAClBF,cAAeA,EACfC,mBAAoBA,EACpBe,KAAMnB,EAAAA,GAAAA,UAGV,SAAClB,EAAD,UACGY,EAAO2B,KAAI,SAAAC,GAAK,OACf,SAAClC,EAAD,WACE,SAAC,KAAD,CACEa,kBAAmBA,EACnBqB,MAAOA,EACPhB,oBAAqBA,EACrBH,cAAeA,KALHmB,EAAMC,GADP,UAarB,gCACG,KACD,SAAC,KAAD,CAAcC,QAAQ,yCACtB,SAAC,KAAD,CAAQC,KAAK,SAASC,QAASjB,EAA/B,SAAuD,iBAGtDnB,IACC,SAAC,KAAD,CACEqB,OAAQrB,EACRsB,QAASH,eAU5B,C","sources":["pages/Groups/Groups.styled.jsx","pages/Groups/Groups.jsx"],"sourcesContent":["import styled from 'styled-components';\n// import { getRandomColors } from 'utils/getRandomColor';\n\nexport const GroupsList = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  row-gap: ${props => props.theme.gapSize.standard};\n`;\n\nexport const GroupItem = styled.li`\n  position: relative;\n  margin: 0;\n  display: flex;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AppBar, CreateGroupModal, Group } from 'components';\nimport { Section, Notification, ListHeader, MultiSelectBar } from 'shared';\nimport { GroupsList, GroupItem } from './Groups.styled';\nimport {\n  ContentWrapper,\n  Main,\n  Button,\n} from 'shared/commonStyledComponents.jsx';\nimport { selectGroups } from 'redux/groups';\nimport { selectContacts, fetchContacts } from 'redux/contacts';\nimport { ITEM_CATEGORIES, ROUTES } from 'constants';\nimport { useMultiSelect } from 'hooks';\n\nconst Groups = () => {\n  const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n  const dispatch = useDispatch();\n  const groups = useSelector(selectGroups);\n  const allContacts = useSelector(selectContacts);\n  const {\n    isMultiSelectOpen,\n    toggleMultiSelect,\n    selectedItems,\n    resetSelectedItems,\n    handleSelectAllClick,\n    updateSelectedItems,\n  } = useMultiSelect(groups, ROUTES.GROUPS);\n\n  useEffect(() => {\n    if (!allContacts) {\n      dispatch(fetchContacts());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  const toggleCreateGroupModal = () => {\n    setIsCreateGroupModalOpen(!isCreateGroupModalOpen);\n  };\n\n  return (\n    <>\n      <AppBar />\n      <Main>\n        <Section>\n          <ContentWrapper>\n            {!!groups.length ? (\n              <>\n                {' '}\n                {isCreateGroupModalOpen && (\n                  <CreateGroupModal\n                    isOpen={isCreateGroupModalOpen}\n                    onClose={toggleCreateGroupModal}\n                  />\n                )}\n                <ListHeader\n                  category={ITEM_CATEGORIES.GROUP}\n                  items={groups}\n                  handleMainBtnClick={toggleCreateGroupModal}\n                  handleSelectClick={toggleMultiSelect}\n                  activeMultiSelect={isMultiSelectOpen}\n                  page={ROUTES.GROUPS}\n                />\n                {isMultiSelectOpen && (\n                  <MultiSelectBar\n                    onSelectAllClick={handleSelectAllClick}\n                    selectedItems={selectedItems}\n                    resetSelectedItems={resetSelectedItems}\n                    page={ROUTES.GROUPS}\n                  />\n                )}\n                <GroupsList>\n                  {groups.map(group => (\n                    <GroupItem key={group.id}>\n                      <Group\n                        isMultiSelectOpen={isMultiSelectOpen}\n                        group={group}\n                        updateSelectedItems={updateSelectedItems}\n                        selectedItems={selectedItems}\n                      />\n                    </GroupItem>\n                  ))}\n                </GroupsList>\n              </>\n            ) : (\n              <>\n                {' '}\n                <Notification message=\"You have not created any groups yet\" />\n                <Button type=\"button\" onClick={toggleCreateGroupModal}>\n                  Create group\n                </Button>\n                {isCreateGroupModalOpen && (\n                  <CreateGroupModal\n                    isOpen={isCreateGroupModalOpen}\n                    onClose={toggleCreateGroupModal}\n                  />\n                )}\n              </>\n            )}\n          </ContentWrapper>\n        </Section>\n      </Main>\n    </>\n  );\n};\n\nexport default Groups;\n"],"names":["GroupsList","styled","props","theme","gapSize","standard","GroupItem","useState","isCreateGroupModalOpen","setIsCreateGroupModalOpen","dispatch","useDispatch","groups","useSelector","selectGroups","allContacts","selectContacts","useMultiSelect","ROUTES","isMultiSelectOpen","toggleMultiSelect","selectedItems","resetSelectedItems","handleSelectAllClick","updateSelectedItems","useEffect","fetchContacts","toggleCreateGroupModal","length","isOpen","onClose","category","ITEM_CATEGORIES","items","handleMainBtnClick","handleSelectClick","activeMultiSelect","page","onSelectAllClick","map","group","id","message","type","onClick"],"sourceRoot":""}