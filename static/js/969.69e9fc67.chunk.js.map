{"version":3,"file":"static/js/969.69e9fc67.chunk.js","mappings":"+NA6HA,UAjGiB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAmBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC/BC,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1BC,GAAYJ,EAAAA,EAAAA,IAAYK,EAAAA,IACxBC,GAAQN,EAAAA,EAAAA,IAAYO,EAAAA,IACpBC,GAAeR,EAAAA,EAAAA,IAAYS,EAAAA,IAC3BC,GAAiBV,EAAAA,EAAAA,IAAYW,EAAAA,IACnC,GAOIC,EAAAA,EAAAA,IAAeV,EAAaW,EAAAA,GAAAA,UAN9BC,EADF,EACEA,kBACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,mBACAC,EALF,EAKEA,qBACAC,EANF,EAMEA,oBAEF,GAA+CC,EAAAA,EAAAA,MAAvCC,EAAR,EAAQA,iBAAkBC,EAA1B,EAA0BA,kBAC1BC,EAAAA,EAAAA,YAAU,WACHrB,GACHT,GAAS+B,EAAAA,EAAAA,MAGZ,GAAE,CAAC/B,IACJ,IAAMgC,KACDjB,KAAkBE,MAAoB,OAACR,QAAD,IAACA,IAAAA,EAAawB,QACzD,OACE,iCACE,SAAC,KAAD,KACA,SAAC,KAAD,WACE,SAAC,KAAD,WACE,UAAC,KAAD,aACI,OAACxB,QAAD,IAACA,IAAAA,EAAawB,UACd,iCACE,SAAC,KAAD,CACEC,SAAUC,EAAAA,EAAAA,QACVC,MAAO3B,EACP4B,YAAa,kBAAMnC,EAAS,GAAD,OAAIkB,EAAAA,GAAAA,QAAlB,EACbkB,kBAAmBhB,EACnBiB,kBAAmBV,EACnBW,kBAAmBnB,EACnBoB,iBAAkBb,EAClBc,KAAMtB,EAAAA,GAAAA,WAEPC,IACC,SAAC,KAAD,CACEsB,iBAAkBlB,EAClBF,cAAeA,EACfC,mBAAoBA,EACpBkB,KAAMtB,EAAAA,GAAAA,WAGTQ,IAAoB,SAAC,KAAD,OAGxBjB,GACC,SAAC,KAAD,IACEE,IAAuB,IAAdF,GACX,SAAC,KAAD,IACkB,OAAhBL,QAAgB,IAAhBA,GAAAA,EAAkB2B,QACpB,+BACE,SAAC,KAAD,CACEW,MAAO,CAAEC,KAAMzC,GACfiB,kBAAmBA,EACnBE,cAAeA,EACfG,oBAAqBA,MAGvBM,GACF,SAAC,KAAD,CACEc,QACE/B,GAAgBE,EAAhB,gFAC6EF,EAD7E,qCACsHE,EADtH,MAEIF,EAAY,gFAC6DA,EAD7D,yFAEgEE,EAFhE,SAMpB,iCACE,SAAC,KAAD,CAAc6B,QAAQ,yFACtB,SAAC,KAAD,CACEC,KAAK,SACLC,QAAS,kBAAM9C,EAAS,GAAD,OAAIkB,EAAAA,GAAAA,QAAlB,EAFX,SAGC,4BAUhB,C","sources":["pages/Contacts/Contacts.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport {\n  ContentWrapper,\n  Main,\n  Button,\n} from 'shared/commonStyledComponents.jsx';\nimport { ContactList, Loader, AppBar } from 'components';\nimport {\n  Section,\n  ErrorMessage,\n  Notification,\n  FilterList,\n  ListHeader,\n  MultiSelectBar,\n} from 'shared';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectFilteredContacts,\n  fetchContacts,\n} from 'redux/contacts';\nimport { selectFilterByName, selectFilterByNumber } from 'redux/filters';\nimport { ITEM_CATEGORIES, ROUTES } from 'constants';\nimport { useMultiSelect, useSearchMenu } from 'hooks';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const allContacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filterByName = useSelector(selectFilterByName);\n  const filterByNumber = useSelector(selectFilterByNumber);\n  const {\n    isMultiSelectOpen,\n    toggleMultiSelect,\n    selectedItems,\n    resetSelectedItems,\n    handleSelectAllClick,\n    updateSelectedItems,\n  } = useMultiSelect(allContacts, ROUTES.CONTACTS);\n  const { isSearchMenuOpen, toggleSearchMenu } = useSearchMenu();\n  useEffect(() => {\n    if (!allContacts) {\n      dispatch(fetchContacts());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n  const isFiltered =\n    (!!filterByName || !!filterByNumber) && !!allContacts?.length;\n  return (\n    <>\n      <AppBar />\n      <Main>\n        <Section>\n          <ContentWrapper>\n            {!!allContacts?.length && (\n              <>\n                <ListHeader\n                  category={ITEM_CATEGORIES.CONTACT}\n                  items={allContacts}\n                  handleClick={() => navigate(`${ROUTES.CREATE}`)}\n                  handleSelectClick={toggleMultiSelect}\n                  handleSearchClick={toggleSearchMenu}\n                  activeMultiSelect={isMultiSelectOpen}\n                  activeSearchMenu={isSearchMenuOpen}\n                  page={ROUTES.CONTACTS}\n                />\n                {isMultiSelectOpen && (\n                  <MultiSelectBar\n                    onSelectAllClick={handleSelectAllClick}\n                    selectedItems={selectedItems}\n                    resetSelectedItems={resetSelectedItems}\n                    page={ROUTES.CONTACTS}\n                  />\n                )}\n                {isSearchMenuOpen && <FilterList />}\n              </>\n            )}\n            {isLoading ? (\n              <Loader />\n            ) : error && isLoading === false ? (\n              <ErrorMessage />\n            ) : filteredContacts?.length ? (\n              <>\n                <ContactList\n                  state={{ from: location }}\n                  isMultiSelectOpen={isMultiSelectOpen}\n                  selectedItems={selectedItems}\n                  updateSelectedItems={updateSelectedItems}\n                />\n              </>\n            ) : isFiltered ? (\n              <Notification\n                message={\n                  filterByName && filterByNumber\n                    ? `No contacts found matching your search criteria for names containing '${filterByName}' and numbers containing '${filterByNumber}'.`\n                    : filterByName\n                    ? `No contacts found matching your search criteria for names containing \"${filterByName}\" `\n                    : `No contacts found matching your search criteria for numbers containing  \"${filterByNumber}\" `\n                }\n              />\n            ) : (\n              <>\n                <Notification message=\"Add your first contact today and discover the amazing possibilities of Phone Genie!\" />\n                <Button\n                  type=\"button\"\n                  onClick={() => navigate(`${ROUTES.CREATE}`)}\n                >\n                  Add contact\n                </Button>\n              </>\n            )}\n          </ContentWrapper>\n        </Section>\n      </Main>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["dispatch","useDispatch","navigate","useNavigate","location","useLocation","filteredContacts","useSelector","selectFilteredContacts","allContacts","selectContacts","isLoading","selectIsLoading","error","selectError","filterByName","selectFilterByName","filterByNumber","selectFilterByNumber","useMultiSelect","ROUTES","isMultiSelectOpen","toggleMultiSelect","selectedItems","resetSelectedItems","handleSelectAllClick","updateSelectedItems","useSearchMenu","isSearchMenuOpen","toggleSearchMenu","useEffect","fetchContacts","isFiltered","length","category","ITEM_CATEGORIES","items","handleClick","handleSelectClick","handleSearchClick","activeMultiSelect","activeSearchMenu","page","onSelectAllClick","state","from","message","type","onClick"],"sourceRoot":""}