{"version":3,"file":"static/js/969.a4fe6ccb.chunk.js","mappings":"gPA8IA,UAlHiB,WACf,OAAkDA,EAAAA,EAAAA,WAAS,GAA3D,eAAOC,EAAP,KAA0BC,EAA1B,KAKMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAmBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC/BC,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1BC,GAAYJ,EAAAA,EAAAA,IAAYK,EAAAA,IACxBC,GAAQN,EAAAA,EAAAA,IAAYO,EAAAA,IACpBC,GAAeR,EAAAA,EAAAA,IAAYS,EAAAA,IAC3BC,GAAiBV,EAAAA,EAAAA,IAAYW,EAAAA,IACnC,GAAgDrB,EAAAA,EAAAA,UAAS,IAAzD,eAAOsB,EAAP,KAAyBC,EAAzB,KACAC,QAAQC,IAAI,qBAAsBH,IAElCI,EAAAA,EAAAA,YAAU,WACHd,GACHT,GAASwB,EAAAA,EAAAA,MAGZ,GAAE,CAACxB,IAEJ,IAAMyB,KACDV,KAAkBE,MAAoB,OAACR,QAAD,IAACA,IAAAA,EAAaiB,QAuBzD,OACE,iCACE,SAAC,KAAD,KACA,SAAC,KAAD,WACE,SAAC,KAAD,WACE,UAAC,KAAD,aACI,OAACjB,QAAD,IAACA,IAAAA,EAAaiB,UACd,iCACE,SAAC,KAAD,CACEC,SAAUC,EAAAA,EAAAA,QACVC,MAAOpB,EACPqB,YAAa,kBAAM5B,EAAS,GAAD,OAAI6B,EAAAA,GAAAA,QAAlB,EACbC,kBA1DU,WACxBjC,GAAsBD,EACvB,EAyDemC,OAAQnC,IAETA,IACC,SAAC,KAAD,CACEoC,iBAtCW,WACtBf,EAAiBO,OAGpBN,EAAoB,IAFpBA,EAAoBX,EAIvB,EAiCiBU,iBAAkBA,KAGtB,SAAC,KAAD,OAGHR,GACC,SAAC,KAAD,IACEE,IAAuB,IAAdF,GACX,SAAC,KAAD,IACkB,OAAhBL,QAAgB,IAAhBA,GAAAA,EAAkBoB,QACpB,+BACE,SAAC,KAAD,CACES,MAAO,CAAEC,KAAMhC,GACfN,kBAAmBA,EACnBqB,iBAAkBA,EAClBkB,uBA/Ce,SAAAC,GAE7B,IADqBC,EAAAA,EAAAA,IAAuBpB,EAAkBmB,GAC5C,CAChB,IAAME,EAA0BrB,EAAiBsB,QAC/C,SAAAC,GAAE,OAAIA,EAAGC,KAAOL,EAAQK,EAAtB,IAEJvB,EAAoBoB,EACrB,KAAM,CACL,IAAMA,EAAuB,kBAAOrB,GAAP,CAAyBmB,IACtDlB,EAAoBoB,EACrB,CACF,MAuCaf,GACF,SAAC,KAAD,CACEmB,QACE7B,GAAgBE,EAAhB,gFAC6EF,EAD7E,qCACsHE,EADtH,MAEIF,EAAY,gFAC6DA,EAD7D,yFAEgEE,EAFhE,SAMpB,iCACE,SAAC,KAAD,CAAc2B,QAAQ,yFACtB,SAAC,KAAD,CACEC,KAAK,SACLC,QAAS,kBAAM5C,EAAS,GAAD,OAAI6B,EAAAA,GAAAA,QAAlB,EAFX,SAGC,4BAUhB,C","sources":["pages/Contacts/Contacts.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport {\n  ContentWrapper,\n  Main,\n  Button,\n} from 'shared/commonStyledComponents.jsx';\nimport { ContactList, Loader, AppBar } from 'components';\nimport {\n  Section,\n  ErrorMessage,\n  Notification,\n  FilterList,\n  ListHeader,\n  MultiSelectBar,\n} from 'shared';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectFilteredContacts,\n  fetchContacts,\n} from 'redux/contacts';\nimport { selectFilterByName, selectFilterByNumber } from 'redux/filters';\nimport { ITEM_CATEGORIES, ROUTES } from 'constants';\nimport { checkContactInSelected } from 'utils';\n\nconst Contacts = () => {\n  const [isMultiSelectOpen, setIsMultiSelectOpen] = useState(false); // new state variable\n\n  const toggleMultiSelect = () => {\n    setIsMultiSelectOpen(!isMultiSelectOpen);\n  };\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const allContacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filterByName = useSelector(selectFilterByName);\n  const filterByNumber = useSelector(selectFilterByNumber);\n  const [selectedContacts, setSelectedContacts] = useState([]);\n  console.log('selectedContacts: ', selectedContacts);\n\n  useEffect(() => {\n    if (!allContacts) {\n      dispatch(fetchContacts());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  const isFiltered =\n    (!!filterByName || !!filterByNumber) && !!allContacts?.length;\n\n  const handleSelectAllClick = () => {\n    if (!selectedContacts.length) {\n      setSelectedContacts(allContacts);\n    } else {\n      setSelectedContacts([]);\n    }\n  };\n\n  const updateSelectedContacts = contact => {\n    const isInSelected = checkContactInSelected(selectedContacts, contact);\n    if (isInSelected) {\n      const updatedSelectedContacts = selectedContacts.filter(\n        el => el.id !== contact.id\n      );\n      setSelectedContacts(updatedSelectedContacts);\n    } else {\n      const updatedSelectedContacts = [...selectedContacts, contact];\n      setSelectedContacts(updatedSelectedContacts);\n    }\n  };\n\n  return (\n    <>\n      <AppBar />\n      <Main>\n        <Section>\n          <ContentWrapper>\n            {!!allContacts?.length && (\n              <>\n                <ListHeader\n                  category={ITEM_CATEGORIES.CONTACT}\n                  items={allContacts}\n                  handleClick={() => navigate(`${ROUTES.CREATE}`)}\n                  handleSelectClick={toggleMultiSelect}\n                  active={isMultiSelectOpen}\n                />\n                {isMultiSelectOpen && (\n                  <MultiSelectBar\n                    onSelectAllClick={handleSelectAllClick}\n                    selectedContacts={selectedContacts}\n                  />\n                )}\n                <FilterList />\n              </>\n            )}\n            {isLoading ? (\n              <Loader />\n            ) : error && isLoading === false ? (\n              <ErrorMessage />\n            ) : filteredContacts?.length ? (\n              <>\n                <ContactList\n                  state={{ from: location }}\n                  isMultiSelectOpen={isMultiSelectOpen}\n                  selectedContacts={selectedContacts}\n                  updateSelectedContacts={updateSelectedContacts}\n                />\n              </>\n            ) : isFiltered ? (\n              <Notification\n                message={\n                  filterByName && filterByNumber\n                    ? `No contacts found matching your search criteria for names containing '${filterByName}' and numbers containing '${filterByNumber}'.`\n                    : filterByName\n                    ? `No contacts found matching your search criteria for names containing \"${filterByName}\" `\n                    : `No contacts found matching your search criteria for numbers containing  \"${filterByNumber}\" `\n                }\n              />\n            ) : (\n              <>\n                <Notification message=\"Add your first contact today and discover the amazing possibilities of Phone Genie!\" />\n                <Button\n                  type=\"button\"\n                  onClick={() => navigate(`${ROUTES.CREATE}`)}\n                >\n                  Add contact\n                </Button>\n              </>\n            )}\n          </ContentWrapper>\n        </Section>\n      </Main>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["useState","isMultiSelectOpen","setIsMultiSelectOpen","dispatch","useDispatch","navigate","useNavigate","location","useLocation","filteredContacts","useSelector","selectFilteredContacts","allContacts","selectContacts","isLoading","selectIsLoading","error","selectError","filterByName","selectFilterByName","filterByNumber","selectFilterByNumber","selectedContacts","setSelectedContacts","console","log","useEffect","fetchContacts","isFiltered","length","category","ITEM_CATEGORIES","items","handleClick","ROUTES","handleSelectClick","active","onSelectAllClick","state","from","updateSelectedContacts","contact","checkContactInSelected","updatedSelectedContacts","filter","el","id","message","type","onClick"],"sourceRoot":""}