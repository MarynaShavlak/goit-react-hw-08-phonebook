{"version":3,"file":"static/js/969.1c68dd0b.chunk.js","mappings":"2MAgFA,UAlEiB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,IACxBC,GAAQJ,EAAAA,EAAAA,IAAYK,EAAAA,IAC1B,GAOIC,EAAAA,EAAAA,IAAeP,EAAaQ,EAAAA,GAAAA,UAN9BC,EADF,EACEA,kBACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,mBACAC,EALF,EAKEA,qBACAC,EANF,EAMEA,qBAGFC,EAAAA,EAAAA,YAAU,WACHf,GACHJ,GAASoB,EAAAA,EAAAA,MAGZ,GAAE,CAACpB,IAEJ,IAAMqB,EAA2B,WAC/BnB,EAAS,GAAD,OAAIU,EAAAA,GAAAA,QACb,EAaD,OACE,8BACGL,GACC,SAAC,KAAD,IACEE,IAAuB,IAAdF,GACX,SAAC,KAAD,KAEA,iCACE,SAAC,KAAD,CACEe,KAAMV,EAAAA,GAAAA,SACNW,MAAOnB,EACPoB,mBAAoBH,EACpBR,kBAAmBA,EACnBC,kBAAmBA,EACnBC,cAAeA,EACfC,mBAAoBA,EACpBC,qBAAsBA,KAExB,SAAC,KAAD,CACEK,KAAMV,EAAAA,GAAAA,SACNa,WA/BY,SAAAC,GACpB,OACE,SAAC,KAAD,CACEA,QAASA,EACTb,kBAAmBA,EACnBE,cAAeA,EACfG,oBAAqBA,GAG1B,EAuBSS,iBAAkBN,QAM7B,C","sources":["pages/Contacts/Contacts.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { Loader, Contact } from 'components';\nimport { ErrorMessage, ActionsMenu, ItemsListSection } from 'shared';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  fetchContacts,\n} from 'redux/contacts';\nimport { ROUTES } from 'constants';\nimport { useMultiSelect } from 'hooks';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const allContacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const {\n    isMultiSelectOpen,\n    toggleMultiSelect,\n    selectedItems,\n    resetSelectedItems,\n    handleSelectAllClick,\n    updateSelectedItems,\n  } = useMultiSelect(allContacts, ROUTES.CONTACTS);\n\n  useEffect(() => {\n    if (!allContacts) {\n      dispatch(fetchContacts());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  const openCreateNewContactPage = () => {\n    navigate(`${ROUTES.CREATE}`);\n  };\n\n  const renderContact = contact => {\n    return (\n      <Contact\n        contact={contact}\n        isMultiSelectOpen={isMultiSelectOpen}\n        selectedItems={selectedItems}\n        updateSelectedItems={updateSelectedItems}\n      />\n    );\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : error && isLoading === false ? (\n        <ErrorMessage />\n      ) : (\n        <>\n          <ActionsMenu\n            page={ROUTES.CONTACTS}\n            items={allContacts}\n            handleMainBtnClick={openCreateNewContactPage}\n            isMultiSelectOpen={isMultiSelectOpen}\n            toggleMultiSelect={toggleMultiSelect}\n            selectedItems={selectedItems}\n            resetSelectedItems={resetSelectedItems}\n            handleSelectAllClick={handleSelectAllClick}\n          />\n          <ItemsListSection\n            page={ROUTES.CONTACTS}\n            renderItem={renderContact}\n            onActionBtnClick={openCreateNewContactPage}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["dispatch","useDispatch","navigate","useNavigate","allContacts","useSelector","selectContacts","isLoading","selectIsLoading","error","selectError","useMultiSelect","ROUTES","isMultiSelectOpen","toggleMultiSelect","selectedItems","resetSelectedItems","handleSelectAllClick","updateSelectedItems","useEffect","fetchContacts","openCreateNewContactPage","page","items","handleMainBtnClick","renderItem","contact","onActionBtnClick"],"sourceRoot":""}