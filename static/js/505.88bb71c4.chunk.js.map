{"version":3,"file":"static/js/505.88bb71c4.chunk.js","mappings":"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","sources":["pages/ManageGroupMember/ManageGroupMember.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport Select from 'react-select';\nimport { AppBar } from 'components';\nimport { Section } from 'shared';\nimport {\n  selectGroups,\n  deleteContactFromGroup,\n  addContactToGroup,\n} from 'redux/groups';\nimport { selectContacts, fetchContacts } from 'redux/contacts';\nimport {\n  ContentWrapper,\n  BackButton,\n  Text,\n} from 'shared/commonStyledComponents.jsx';\nimport {\n  GroupsList,\n  GroupButton,\n} from 'components/AddContactToGroupModal/AddContactToGroupModal.styled';\nimport { renderIcons, convertHyphenatedString } from 'utils';\nimport { ICON_NAMES, ICON_SIZES } from 'constants';\n\nconst ManageGroupMember = () => {\n  const dispatch = useDispatch();\n  const { groupName } = useParams();\n\n  const allContacts = useSelector(selectContacts);\n  const groups = useSelector(selectGroups);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const choseContactToAddInGroup = contact => {\n    setContactsToAdd(prevContacts => [...prevContacts, contact]);\n    dispatch(addContactToGroup({ group: originalGroupName, contact }));\n  };\n\n  const getContactsByGroupName = ({ groupName, groups }) => {\n    const convertedName = convertHyphenatedString(groupName);\n    return groups.find(group => group.name.toLowerCase() === convertedName)\n      .contacts;\n  };\n\n  const getContactsToSelect = ({ contactsInGroup, allContacts }) => {\n    const contactIds = new Set(contactsInGroup.map(c => c.id));\n    return allContacts.filter(c => !contactIds.has(c.id));\n  };\n  const getOriginalGroupName = groupName => {\n    const convertedName = convertHyphenatedString(groupName);\n    return groups.find(group => group.name.toLowerCase() === convertedName)\n      .name;\n  };\n  const handleContactClick = contact => {\n    const isSelected = contactsToAdd.map(el => el.id).includes(contact.id);\n\n    if (isSelected) {\n      setContactsToAdd(contactsToAdd.filter(el => el.id !== contact.id));\n      dispatch(\n        deleteContactFromGroup({\n          group: originalGroupName,\n          contact,\n        })\n      );\n    }\n  };\n\n  const contactsInGroup = useMemo(\n    () => getContactsByGroupName({ groupName, groups }),\n    [groupName, groups]\n  );\n  const contactsToSelect = useMemo(\n    () =>\n      getContactsToSelect({\n        contactsInGroup,\n        allContacts,\n      }),\n    [contactsInGroup, allContacts]\n  );\n  const originalGroupName = useMemo(\n    () => getOriginalGroupName(groupName),\n    // eslint-disable-next-line\n    [groupName]\n  );\n  const [contactsToAdd, setContactsToAdd] = useState(contactsInGroup);\n  const [initialContactsInGroup, setInitialContactsInGroup] = useState([]);\n\n  useEffect(() => {\n    setInitialContactsInGroup(contactsInGroup);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const contactsNames = initialContactsInGroup.map(contact => contact.name);\n\n  const options = contactsToSelect.map(contact => ({\n    label: `${contact.name}: ${contact.number} `,\n    value: contact,\n  }));\n\n  return (\n    <>\n      <AppBar />\n      <main>\n        <Section>\n          <ContentWrapper>\n            <BackButton to=\"/groups\">\n              <button type=\"button\" aria-label=\"Back to previous page\">\n                {renderIcons(ICON_NAMES.BACK_ARROW, ICON_SIZES.LARGE)}\n              </button>\n            </BackButton>\n            <>\n              {!!initialContactsInGroup.length && (\n                <Text>\n                  The following contacts have already been added to the group :{' '}\n                  <b>{contactsNames.join(', ')}</b>\n                </Text>\n              )}\n\n              <Text>\n                Chose contacts to add to the group <b>\"{originalGroupName}\"</b>\n              </Text>\n              <Select\n                options={options}\n                onChange={option => choseContactToAddInGroup(option.value)}\n              />\n              {!!contactsToAdd.length && (\n                <GroupsList>\n                  {contactsToAdd.map(contact => (\n                    <li key={contact.id}>\n                      <GroupButton\n                        type=\"button\"\n                        className={\n                          contactsToAdd.includes(contact) ? 'selected' : ''\n                        }\n                        onClick={() => handleContactClick(contact)}\n                      >\n                        {contact.name}: {contact.number}\n                      </GroupButton>\n                    </li>\n                  ))}\n                </GroupsList>\n              )}\n            </>\n          </ContentWrapper>\n        </Section>\n      </main>\n    </>\n  );\n};\n\nexport default ManageGroupMember;\n"],"names":["dispatch","useDispatch","groupName","useParams","allContacts","useSelector","selectContacts","groups","selectGroups","useEffect","fetchContacts","contactsInGroup","useMemo","convertedName","convertHyphenatedString","find","group","name","toLowerCase","contacts","getContactsByGroupName","contactsToSelect","contactIds","Set","map","c","id","filter","has","getContactsToSelect","originalGroupName","getOriginalGroupName","useState","contactsToAdd","setContactsToAdd","initialContactsInGroup","setInitialContactsInGroup","contactsNames","contact","options","label","number","value","to","type","renderIcons","ICON_NAMES","ICON_SIZES","length","join","onChange","option","prevContacts","addContactToGroup","className","includes","onClick","el","deleteContactFromGroup","handleContactClick"],"sourceRoot":""}