{"version":3,"file":"static/js/91.8214da77.chunk.js","mappings":"sRAGaA,EAAOC,EAAAA,GAAAA,EAAH,uJAEiB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,MAAxB,IAQ1BC,EAAWL,EAAAA,GAAAA,IAAH,4KAORM,GAAiBN,EAAAA,EAAAA,IAAOO,EAAAA,EAAPP,CAAH,8QAOO,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,MAAxB,IAGL,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,QAAQK,OAAxB,IAK1BC,EAAmBT,EAAAA,GAAAA,OAAH,+UAehBU,EAAaV,EAAAA,GAAAA,GAAH,uH,8KC/CVW,EAAaX,EAAAA,GAAAA,GAAH,qKAUVY,EAAYZ,EAAAA,GAAAA,GAAH,+EAKTa,EAAiBb,EAAAA,GAAAA,OAAH,+U,mBC4D3B,EApEe,WACb,OAA4Dc,EAAAA,EAAAA,WAAS,GAArE,eAAOC,EAAP,KAA+BC,EAA/B,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,KAE3BC,EAAAA,EAAAA,YAAU,WACRL,GAASM,EAAAA,EAAAA,MACV,GAAE,CAACN,IAEJ,IAAMO,EAAyB,WAC7BR,GAA2BD,EAC5B,EAED,OACE,2BACE,SAAC,KAAD,WACE,SAAC,KAAD,UACqB,IAAlBI,EAAOM,QACN,gCACG,IACAV,IACC,SAAC,KAAD,CACEW,OAAQX,EACRY,QAASH,KAGb,UAAC,KAAD,YACE,UAAC,KAAD,WAAM,oBACY,2BAAOI,EAAAA,EAAAA,IAAkBT,SAE3C,SAACN,EAAD,CACEgB,KAAK,SACL,aAAW,kBACXC,QAASN,EAHX,UAKGO,EAAAA,EAAAA,IAAY,WAAY,UAG7B,SAACpB,EAAD,UACGQ,EAAOa,KAAI,SAAAC,GAAK,OACf,SAACrB,EAAD,WACE,SAAC,KAAD,CAAOqB,MAAOA,KADAA,EAAMC,GADP,UAQrB,gCACG,KACD,SAAC,KAAD,CAAcC,QAAQ,wCACrBpB,IACC,SAAC,KAAD,CACEW,OAAQX,EACRY,QAASH,KAGb,SAAC,IAAD,CAAQK,KAAK,SAASC,QAASN,EAA/B,SAAuD,yBASpE,C","sources":["pages/Contacts/Contacts.styled.jsx","pages/Groups/Groups.styled.jsx","pages/Groups/Groups.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Container } from 'components/SharedLayout/SharedLayout.styled';\n\nexport const Info = styled.p`\n  font-size: 16px;\n  @media screen and (min-width: ${props => props.theme.devices.tablet}) {\n    font-size: 18px;\n  }\n\n  span {\n    font-weight: 700;\n  }\n`;\nexport const InfoWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid #f787b4;\n  border-top: 1px solid #f787b4;\n`;\nexport const ContentWrapper = styled(Container)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n  padding: 0;\n  width: 290px;\n  @media screen and (min-width: ${props => props.theme.devices.tablet}) {\n    width: 700px;\n  }\n  @media screen and (min-width: ${props => props.theme.devices.desktop}) {\n    width: 800px;\n  }\n`;\n\nexport const AddNewContactBtn = styled.button`\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  background-color: #f787b4;\n  border: none;\n  cursor: pointer;\n  transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background-color: #ef4287;\n    color: white;\n  }\n`;\n\nexport const FilterList = styled.ul`\n  display: flex;\n  justify-content: space-between;\n  li {\n    width: calc(50% - 10px);\n  }\n`;\n","import styled from 'styled-components';\n// import { getRandomColors } from 'utils/getRandomColor';\n\nexport const GroupsList = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  row-gap: 10px;\n`;\n\nexport const GroupItem = styled.li`\n  position: relative;\n  margin: 0;\n  display: flex;\n`;\nexport const AddNewGroupBtn = styled.button`\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  background-color: #f787b4;\n  border: none;\n  cursor: pointer;\n  transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background-color: #ef4287;\n    color: white;\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectGroups } from 'redux/groups';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { Button } from 'components/OperationButton/OperationButton.styled';\nimport { Section, Notification, CreateGroupModal, Group } from 'components';\nimport { ContentWrapper, Info, InfoWrap } from 'pages/Contacts/Contacts.styled';\nimport { GroupsList, GroupItem, AddNewGroupBtn } from './Groups.styled';\nimport { renderIcons, getGroupsQuantity } from 'utils';\n\nconst Groups = () => {\n  const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const groups = useSelector(selectGroups);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const toggleCreateGroupModal = () => {\n    setIsCreateGroupModalOpen(!isCreateGroupModalOpen);\n  };\n\n  return (\n    <main>\n      <Section>\n        <ContentWrapper>\n          {groups.length !== 0 ? (\n            <>\n              {' '}\n              {isCreateGroupModalOpen && (\n                <CreateGroupModal\n                  isOpen={isCreateGroupModalOpen}\n                  onClose={toggleCreateGroupModal}\n                />\n              )}\n              <InfoWrap>\n                <Info>\n                  Total quantity: <span>{getGroupsQuantity(groups)}</span>\n                </Info>\n                <AddNewGroupBtn\n                  type=\"button\"\n                  aria-label=\"Add new contact\"\n                  onClick={toggleCreateGroupModal}\n                >\n                  {renderIcons('addGroup', 30)}\n                </AddNewGroupBtn>\n              </InfoWrap>\n              <GroupsList>\n                {groups.map(group => (\n                  <GroupItem key={group.id}>\n                    <Group group={group} />\n                  </GroupItem>\n                ))}\n              </GroupsList>\n            </>\n          ) : (\n            <>\n              {' '}\n              <Notification message=\"You have not created any groups yet\" />\n              {isCreateGroupModalOpen && (\n                <CreateGroupModal\n                  isOpen={isCreateGroupModalOpen}\n                  onClose={toggleCreateGroupModal}\n                />\n              )}\n              <Button type=\"button\" onClick={toggleCreateGroupModal}>\n                Create group\n              </Button>\n            </>\n          )}\n        </ContentWrapper>\n      </Section>\n    </main>\n  );\n};\n\nexport default Groups;\n"],"names":["Info","styled","props","theme","devices","tablet","InfoWrap","ContentWrapper","Container","desktop","AddNewContactBtn","FilterList","GroupsList","GroupItem","AddNewGroupBtn","useState","isCreateGroupModalOpen","setIsCreateGroupModalOpen","dispatch","useDispatch","groups","useSelector","selectGroups","useEffect","fetchContacts","toggleCreateGroupModal","length","isOpen","onClose","getGroupsQuantity","type","onClick","renderIcons","map","group","id","message"],"sourceRoot":""}