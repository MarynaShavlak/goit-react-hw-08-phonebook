{"version":3,"file":"static/js/2.31417d29.chunk.js","mappings":"oNA0EA,UAjEe,WACb,OAA4DA,EAAAA,EAAAA,WAAS,GAArE,eAAOC,EAAP,KAA+BC,EAA/B,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBC,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,IAChC,GAOIC,EAAAA,EAAAA,IAAeL,EAAQM,EAAAA,GAAAA,QANzBC,EADF,EACEA,kBACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,mBACAC,EALF,EAKEA,qBACAC,EANF,EAMEA,qBAGFC,EAAAA,EAAAA,YAAU,WACHV,GACHL,GAASgB,EAAAA,EAAAA,MAGZ,GAAE,CAAChB,IAEJ,IAAMiB,EAAyB,WAC7BlB,GAA2BD,EAC5B,EAaD,OACE,iCACE,SAAC,KAAD,CACEoB,KAAMV,EAAAA,GAAAA,OACNW,MAAOjB,EACPkB,mBAAoBH,EACpBR,kBAAmBA,EACnBC,kBAAmBA,EACnBC,cAAeA,EACfC,mBAAoBA,EACpBC,qBAAsBA,KAGxB,SAAC,KAAD,CACEK,KAAMV,EAAAA,GAAAA,OACNa,WA1Bc,SAAAC,GAClB,OACE,SAAC,KAAD,CACEb,kBAAmBA,EACnBa,MAAOA,EACPR,oBAAqBA,EACrBH,cAAeA,GAGpB,EAkBKY,iBAAkBN,IAGnBnB,IACC,SAAC,KAAD,CACE0B,OAAQ1B,EACR2B,QAASR,MAKlB,C","sources":["pages/Groups/Groups.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CreateGroupModal, Group } from 'components';\nimport { ActionsMenu, ItemsListSection } from 'shared';\nimport { selectGroups } from 'redux/groups';\nimport { selectContacts, fetchContacts } from 'redux/contacts';\nimport { ROUTES } from 'constants';\nimport { useMultiSelect } from 'hooks';\n\nconst Groups = () => {\n  const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n  const dispatch = useDispatch();\n  const groups = useSelector(selectGroups);\n  const allContacts = useSelector(selectContacts);\n  const {\n    isMultiSelectOpen,\n    toggleMultiSelect,\n    selectedItems,\n    resetSelectedItems,\n    handleSelectAllClick,\n    updateSelectedItems,\n  } = useMultiSelect(groups, ROUTES.GROUPS);\n\n  useEffect(() => {\n    if (!allContacts) {\n      dispatch(fetchContacts());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  const toggleCreateGroupModal = () => {\n    setIsCreateGroupModalOpen(!isCreateGroupModalOpen);\n  };\n\n  const renderGroup = group => {\n    return (\n      <Group\n        isMultiSelectOpen={isMultiSelectOpen}\n        group={group}\n        updateSelectedItems={updateSelectedItems}\n        selectedItems={selectedItems}\n      />\n    );\n  };\n\n  return (\n    <>\n      <ActionsMenu\n        page={ROUTES.GROUPS}\n        items={groups}\n        handleMainBtnClick={toggleCreateGroupModal}\n        isMultiSelectOpen={isMultiSelectOpen}\n        toggleMultiSelect={toggleMultiSelect}\n        selectedItems={selectedItems}\n        resetSelectedItems={resetSelectedItems}\n        handleSelectAllClick={handleSelectAllClick}\n      />\n\n      <ItemsListSection\n        page={ROUTES.GROUPS}\n        renderItem={renderGroup}\n        onActionBtnClick={toggleCreateGroupModal}\n      />\n\n      {isCreateGroupModalOpen && (\n        <CreateGroupModal\n          isOpen={isCreateGroupModalOpen}\n          onClose={toggleCreateGroupModal}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Groups;\n"],"names":["useState","isCreateGroupModalOpen","setIsCreateGroupModalOpen","dispatch","useDispatch","groups","useSelector","selectGroups","allContacts","selectContacts","useMultiSelect","ROUTES","isMultiSelectOpen","toggleMultiSelect","selectedItems","resetSelectedItems","handleSelectAllClick","updateSelectedItems","useEffect","fetchContacts","toggleCreateGroupModal","page","items","handleMainBtnClick","renderItem","group","onActionBtnClick","isOpen","onClose"],"sourceRoot":""}