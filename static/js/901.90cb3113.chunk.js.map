{"version":3,"file":"static/js/901.90cb3113.chunk.js","mappings":"uRAGaA,GAAYC,E,QAAAA,IAAOC,EAAAA,GAAPD,CAAH,8E,gDCItBE,IAAAA,cAAoB,SAEpB,IAAMC,EAAe,CACnBC,QAAS,CACPC,gBAAiB,sBAEnBC,QAAS,CACPC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,WAAY,UACZC,MAAO,QACPC,QAAS,YACTC,OAAQ,OACRC,UAAW,0BA6Bf,EAzBsB,WACpB,OAA4CC,EAAAA,EAAAA,WAAS,GAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACMC,EAAiB,kBAAMD,GAAmBD,EAAzB,EAEvB,OACE,iCACE,SAACnB,EAAD,CAAW,aAAW,kBAAkBsB,QAASD,EAAjD,UACGE,EAAAA,EAAAA,GAAY,MAAOC,EAAAA,EAAAA,MAErBL,IACC,SAAC,IAAD,CACEM,OAAQN,EACRO,aAAa,oCACbC,MAAOvB,EACPwB,eAAgB,IAChBC,2BAA2B,EAC3BC,eAAgBT,EANlB,UAQE,SAAC,IAAD,CAAaU,SAAUV,QAKhC,EC2CD,EAtEiB,WACf,IAAMW,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,WACRF,EAASG,EAAAA,KACV,GAAE,CAACH,IAEJ,IAAMI,GAAmBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC/BC,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1BC,GAAYJ,EAAAA,EAAAA,IAAYK,EAAAA,IACxBC,GAAQN,EAAAA,EAAAA,IAAYO,EAAAA,IACpBC,GAAeR,EAAAA,EAAAA,IAAYS,EAAAA,IAC3BC,GAAiBV,EAAAA,EAAAA,IAAYW,EAAAA,IAC7BC,KACDJ,KAAkBE,MAAqBR,EAAYW,OAExD,OACE,+BACE,UAAC,IAAD,YACE,SAAC,KAAD,CAASC,MAAM,WAAf,UACE,gCAC0B,IAAvBZ,EAAYW,SACX,iCACE,UAAC,IAAD,wBACW,0BAAOX,EAAYW,SAD9B,kCAIA,SAAC,KAAD,CAAQE,KAAK,UACb,SAAC,KAAD,CAAQA,KAAK,cAIhBX,GACC,SAAC,KAAD,IACEE,IAAuB,IAAdF,GACX,SAAC,KAAD,IACEL,EAAiBc,QACnB,iCACE,SAAC,EAAD,KACA,SAAC,KAAD,OAEAD,GACF,SAAC,KAAD,CACEI,QACER,GAAgBE,EAAhB,0CACuCF,EADvC,0BACqEE,EADrE,KAEIF,EAAY,0CACuBA,EADvB,kDAEyBE,EAFzB,SAMpB,SAAC,KAAD,CAAcM,QAAQ,sDAI5B,SAAC,KAAD,CACEC,SAAS,eACTC,aAAa,EACbC,cAAY,EACZC,kBAAgB,EAChBC,cAAc,EACdC,MAAM,UACNC,UAAW,IACXjC,MAAO,CAAEb,MAAO,QAAS+C,SAAU,OAAQC,WAAY,aAKhE,C,yGCzFYC,EAAY9D,EAAAA,GAAAA,IAAH,iJAQT+D,EAAO/D,EAAAA,GAAAA,EAAH,iF","sources":["components/AddNewContact/AddNewContact.styled.jsx","components/AddNewContact/AddNewContact.jsx","pages/Contacts/Contacts.jsx","pages/Contacts/Contacts.styled.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { IconButton } from 'components';\n\nexport const StickyBtn = styled(IconButton)`\n  z-index: 999;\n  position: fixed;\n  bottom: 20px;\n`;\n","import React, { useState } from 'react';\nimport { StickyBtn } from './AddNewContact.styled';\nimport { renderIcons } from 'utils/renderIcons';\nimport { iconSize } from 'constants';\nimport Modal from 'react-modal';\nimport { ContactForm } from 'components';\n\nModal.setAppElement('#root');\n\nconst customStyles = {\n  overlay: {\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n  },\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    background: '#fab7d2',\n    width: '700px',\n    padding: '30px 20px',\n    border: 'none',\n    transform: 'translate(-50%, -50%)',\n  },\n};\n\nconst AddNewContact = () => {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const toggleAddModal = () => setIsAddModalOpen(!isAddModalOpen);\n\n  return (\n    <>\n      <StickyBtn aria-label=\"Add new contact\" onClick={toggleAddModal}>\n        {renderIcons('add', iconSize.md)}\n      </StickyBtn>\n      {isAddModalOpen && (\n        <Modal\n          isOpen={isAddModalOpen}\n          contentLabel=\"Modal window to edit contact info\"\n          style={customStyles}\n          closeTimeoutMS={300}\n          shouldCloseOnOverlayClick={true}\n          onRequestClose={toggleAddModal}\n        >\n          <ContactForm onSubmit={toggleAddModal} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default AddNewContact;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Info } from './Contacts.styled';\nimport {\n  ErrorMessage,\n  Section,\n  ContactList,\n  Filter,\n  Loader,\n  Notification,\n} from 'components';\nimport * as contactsOperations from 'redux/contacts/contactsOperations';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectFilteredContacts,\n  selectFilterByName,\n  selectFilterByNumber,\n} from 'redux/selectors';\nimport { ToastContainer } from 'react-toastify';\nimport AddNewContact from 'components/AddNewContact/AddNewContact';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const allContacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filterByName = useSelector(selectFilterByName);\n  const filterByNumber = useSelector(selectFilterByNumber);\n  const isFiltered =\n    (!!filterByName || !!filterByNumber) && !!allContacts.length;\n\n  return (\n    <>\n      <Container>\n        <Section title=\"Contacts\">\n          <>\n            {allContacts.length !== 0 && (\n              <>\n                <Info>\n                  You have <span>{allContacts.length}</span> contacts in your\n                  phoneBook\n                </Info>\n                <Filter name=\"name\" />\n                <Filter name=\"number\" />\n              </>\n            )}\n\n            {isLoading ? (\n              <Loader />\n            ) : error && isLoading === false ? (\n              <ErrorMessage />\n            ) : filteredContacts.length ? (\n              <>\n                <AddNewContact />\n                <ContactList />\n              </>\n            ) : isFiltered ? (\n              <Notification\n                message={\n                  filterByName && filterByNumber\n                    ? `Nothing found by selected name \"${filterByName}\"  and number \"${filterByNumber}\"`\n                    : filterByName\n                    ? `Nothing found by selected name \"${filterByName}\" `\n                    : `Nothing found by selected number \"${filterByNumber}\" `\n                }\n              />\n            ) : (\n              <Notification message=\"There are no contacts in your phonebook yet\" />\n            )}\n          </>\n        </Section>\n        <ToastContainer\n          position=\"bottom-right\"\n          newestOnTop={false}\n          closeOnClick\n          pauseOnFocusLoss\n          pauseOnHover={false}\n          theme=\"colored\"\n          autoClose={4000}\n          style={{ width: '500px', fontSize: '28px', lineHeight: '1.2' }}\n        />\n      </Container>\n    </>\n  );\n};\n\nexport default Contacts;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding-top: 20px;\n  width: 800px;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  row-gap: 30px;\n`;\nexport const Info = styled.p`\n  font-size: 35px;\n  span {\n    font-weight: 700;\n  }\n`;\n"],"names":["StickyBtn","styled","IconButton","Modal","customStyles","overlay","backgroundColor","content","top","left","right","bottom","marginRight","background","width","padding","border","transform","useState","isAddModalOpen","setIsAddModalOpen","toggleAddModal","onClick","renderIcons","iconSize","isOpen","contentLabel","style","closeTimeoutMS","shouldCloseOnOverlayClick","onRequestClose","onSubmit","dispatch","useDispatch","useEffect","contactsOperations","filteredContacts","useSelector","selectFilteredContacts","allContacts","selectContacts","isLoading","selectIsLoading","error","selectError","filterByName","selectFilterByName","filterByNumber","selectFilterByNumber","isFiltered","length","title","name","message","position","newestOnTop","closeOnClick","pauseOnFocusLoss","pauseOnHover","theme","autoClose","fontSize","lineHeight","Container","Info"],"sourceRoot":""}