{"version":3,"file":"static/js/22.ca71eec8.chunk.js","mappings":"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","sources":["pages/Contacts/Contacts.styled.jsx","pages/ManageGroupMember/ManageGroupMember.styled.jsx","pages/ManageGroupMember/ManageGroupMember.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Info = styled.p`\n  font-size: 24px;\n  span {\n    font-weight: 700;\n  }\n`;\n\nexport const ContentWrapper = styled.div`\n  position: relative;\n  width: 800px;\n  display: flex;\n  flex-direction: column;\n  row-gap: 40px;\n`;\n\nexport const AddNewContactBtn = styled.button`\n  position: absolute;\n  right: 0;\n  border-radius: 50%;\n  display: flex;\n  column-gap: 10px;\n  min-width: 40px;\n  align-self: center;\n  align-items: center;\n  padding: 10px 10px;\n  background-color: #f787b4;\n  color: black;\n  border: 5px solid transparent;\n  font-size: 20px;\n  font-weight: 800;\n  box-shadow: 5px 5px 8px 1px rgba(112, 111, 111, 1);\n  cursor: pointer;\n  transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background-color: #ef4287;\n    color: white;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const GroupsList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const GroupButton = styled.button`\n  display: flex;\n  justify-content: center;\n  padding: 10px 30px;\n  background-color: #fde7f0;\n  color: black;\n  border: 5px solid transparent;\n  border-radius: 10px;\n  font-size: 16px;\n  font-weight: 800;\n  text-transform: uppercase;\n  cursor: pointer;\n  transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background-color: #f787b4;\n    color: white;\n    box-shadow: 5px 5px 8px 1px rgba(112, 111, 111, 1);\n  }\n  &.selected {\n    background-color: #bb6bd9;\n  }\n`;\n\nexport const Text = styled.p`\n  font-size: 20px;\n  padding-left: 10px;\n  padding-right: 10px;\n`;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectGroups } from 'redux/groups';\nimport { Link, useParams } from 'react-router-dom';\nimport Select from 'react-select';\nimport { Section, IconButton } from 'components';\nimport { selectContacts } from 'redux/contacts';\nimport { deleteContactFromGroup, addContactToGroup } from 'redux/groups';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { ContentWrapper } from 'pages/Contacts/Contacts.styled';\nimport {\n  GroupsList,\n  GroupButton,\n} from 'components/AddContactToGroupModal/AddContactToGroupModal.styled';\nimport { Text } from './ManageGroupMember.styled';\nimport { renderIcons, convertHyphenatedString } from 'utils/';\nimport { iconSize } from 'constants';\n\nconst ManageGroupMember = () => {\n  const dispatch = useDispatch();\n  const { groupName } = useParams();\n\n  const allContacts = useSelector(selectContacts);\n  const groups = useSelector(selectGroups);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const choseContactToAddInGroup = contact => {\n    setContactsToAdd(prevContacts => [...prevContacts, contact]);\n    dispatch(addContactToGroup({ group: originalGroupName, contact }));\n  };\n\n  const getContactsByGroupName = ({ groupName, groups }) => {\n    const convertedName = convertHyphenatedString(groupName);\n    return groups.find(group => group.name.toLowerCase() === convertedName)\n      .contacts;\n  };\n\n  const getContactsToSelect = ({ contactsInGroup, allContacts }) => {\n    const contactIds = new Set(contactsInGroup.map(c => c.id));\n    return allContacts.filter(c => !contactIds.has(c.id));\n  };\n  const getOriginalGroupName = groupName => {\n    const convertedName = convertHyphenatedString(groupName);\n    return groups.find(group => group.name.toLowerCase() === convertedName)\n      .name;\n  };\n  const handleContactClick = contact => {\n    const isSelected = contactsToAdd.map(el => el.id).includes(contact.id);\n\n    if (isSelected) {\n      setContactsToAdd(contactsToAdd.filter(el => el.id !== contact.id));\n      dispatch(\n        deleteContactFromGroup({\n          group: originalGroupName,\n          contact,\n        })\n      );\n    }\n  };\n\n  const contactsInGroup = useMemo(\n    () => getContactsByGroupName({ groupName, groups }),\n    [groupName, groups]\n  );\n  const contactsToSelect = useMemo(\n    () =>\n      getContactsToSelect({\n        contactsInGroup,\n        allContacts,\n      }),\n    [contactsInGroup, allContacts]\n  );\n  const originalGroupName = useMemo(\n    () => getOriginalGroupName(groupName),\n    // eslint-disable-next-line\n    [groupName]\n  );\n  const [contactsToAdd, setContactsToAdd] = useState(contactsInGroup);\n  const [initialContactsInGroup, setInitialContactsInGroup] = useState([]);\n\n  useEffect(() => {\n    setInitialContactsInGroup(contactsInGroup);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const contactsNames = initialContactsInGroup.map(contact => contact.name);\n\n  const options = contactsToSelect.map(contact => ({\n    label: `${contact.name}: ${contact.number} `,\n    value: contact,\n  }));\n\n  return (\n    <main>\n      <Section>\n        <ContentWrapper>\n          <Link to=\"/groups\">\n            <IconButton aria-label=\"Back to previous page\">\n              {renderIcons('back', iconSize.sm)}\n            </IconButton>\n          </Link>{' '}\n          <>\n            {!!initialContactsInGroup.length && (\n              <Text>\n                The following contacts have already been added to the group :{' '}\n                <b>{contactsNames.join(', ')}</b>\n              </Text>\n            )}\n\n            <Text>\n              Chose contacts to add to the group <b>\"{originalGroupName}\"</b>\n            </Text>\n            <Select\n              options={options}\n              onChange={option => choseContactToAddInGroup(option.value)}\n            />\n            {!!contactsToAdd.length && (\n              <GroupsList>\n                {contactsToAdd.map(contact => (\n                  <li key={contact.id}>\n                    <GroupButton\n                      type=\"button\"\n                      className={\n                        contactsToAdd.includes(contact) ? 'selected' : ''\n                      }\n                      onClick={() => handleContactClick(contact)}\n                    >\n                      {contact.name}: {contact.number}\n                    </GroupButton>\n                  </li>\n                ))}\n              </GroupsList>\n            )}\n          </>\n        </ContentWrapper>\n      </Section>\n    </main>\n  );\n};\n\nexport default ManageGroupMember;\n"],"names":["Info","styled","ContentWrapper","AddNewContactBtn","Text","dispatch","useDispatch","groupName","useParams","allContacts","useSelector","selectContacts","groups","selectGroups","useEffect","fetchContacts","contactsInGroup","useMemo","convertedName","convertHyphenatedString","find","group","name","toLowerCase","contacts","getContactsByGroupName","contactsToSelect","contactIds","Set","map","c","id","filter","has","getContactsToSelect","originalGroupName","getOriginalGroupName","useState","contactsToAdd","setContactsToAdd","initialContactsInGroup","setInitialContactsInGroup","contactsNames","contact","options","label","number","value","to","renderIcons","iconSize","length","join","onChange","option","prevContacts","addContactToGroup","type","className","includes","onClick","el","deleteContactFromGroup","handleContactClick"],"sourceRoot":""}