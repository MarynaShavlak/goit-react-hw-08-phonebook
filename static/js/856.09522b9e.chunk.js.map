{"version":3,"file":"static/js/856.09522b9e.chunk.js","mappings":"iRAiFA,UAhEoB,WAAO,IAAD,IAClBA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,MAAdD,UACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BC,GAAmBF,EAAAA,EAAAA,IAAYG,EAAAA,IAC/BC,GAASJ,EAAAA,EAAAA,IAAYK,EAAAA,IAErBC,GAAUC,EAAAA,EAAAA,IAAe,CAAEZ,UAAAA,EAAWa,SAAUT,KAEtDU,EAAAA,EAAAA,YAAU,WACHV,GACHN,GAASiB,EAAAA,EAAAA,MAGZ,GAAE,CAACjB,IAEJ,IAAMkB,EAAY,oBAChBpB,EAASqB,aADO,aAChB,EAAgBC,YADA,kBACWC,EAAAA,GAAAA,KAAcA,EAAAA,GAAAA,UAErCC,EAAkB,mCAAG,WAAOT,EAASU,GAAhB,iFACnBC,EAA4BD,GADT,uBAEnBE,EAAmBF,GAFA,QAGzBG,EAAAA,EAAAA,wBAAuBb,EAASU,GAChCnB,EAAS,GAAD,OAAIiB,EAAAA,GAAAA,KAAcA,EAAAA,GAAAA,WAJD,2CAAH,wDAOlBG,EAA2B,mCAAG,WAAMG,GAAN,sEACZC,EAAAA,EAAAA,IAAqBf,EAASJ,GADlB,gCAG1BT,GAAS6B,EAAAA,EAAAA,IAAsBF,IAHL,2CAAH,sDAO3BF,EAAkB,mCAAG,WAAME,GAAN,sEACHG,EAAAA,EAAAA,IAAqBH,EAAehB,GACxCoB,OAFO,gCAGjB/B,GAASgC,EAAAA,EAAAA,IAAsBL,IAHd,2CAAH,sDAOxB,OAAOd,GACL,iCACE,SAAC,KAAD,KACA,SAAC,KAAD,WACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAYoB,OAAQf,KACpB,SAAC,KAAD,CAAsBL,QAASA,KAC/B,SAAC,IAAD,CACEqB,OAAQC,EAAAA,GAAAA,KACRtB,QAASA,EACTuB,SAAUd,eAOpB,SAAC,KAAD,GAEH,C","sources":["pages/EditContact/EditContact.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLocation, useParams, useNavigate } from 'react-router-dom';\nimport { Loader, AppBar, ContactEditInfoBlock } from 'components';\nimport { Section, ContactForm, BackButton } from 'shared';\nimport { ContentWrapper, Main } from 'shared/commonStyledComponents.jsx';\nimport { selectContacts, fetchContacts } from 'redux/contacts';\nimport { showEditContactSuccess } from 'utils/notifications';\nimport { getContactById } from 'utils';\nimport { CONTACT_ACTIONS, ROUTES } from 'constants';\nimport {\n  selectFavoritesContacts,\n  updateFavoriteContact,\n} from 'redux/favorites';\nimport { selectGroups, updateContactInGroups } from 'redux/groups';\nimport { isContactInFavorites, findGroupsForContact } from 'utils';\n\nconst EditContact = () => {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const { contactId } = useParams();\n  const navigate = useNavigate();\n  const allContacts = useSelector(selectContacts);\n  const favoriteContacts = useSelector(selectFavoritesContacts);\n  const groups = useSelector(selectGroups);\n\n  const contact = getContactById({ contactId, contacts: allContacts });\n\n  useEffect(() => {\n    if (!allContacts) {\n      dispatch(fetchContacts());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  const backLinkHref =\n    location.state?.from ?? `${ROUTES.ROOT + ROUTES.CONTACTS}`;\n\n  const successEditContact = async (contact, updatedContact) => {\n    await handleFavoriteContactUpdate(updatedContact);\n    await handleGroupsUpdate(updatedContact);\n    showEditContactSuccess(contact, updatedContact);\n    navigate(`${ROUTES.ROOT + ROUTES.CONTACTS}`);\n  };\n\n  const handleFavoriteContactUpdate = async editedContact => {\n    const isInFavorites = isContactInFavorites(contact, favoriteContacts);\n    if (isInFavorites) {\n      await dispatch(updateFavoriteContact(editedContact));\n    }\n  };\n\n  const handleGroupsUpdate = async editedContact => {\n    const contactGroups = findGroupsForContact(editedContact, groups);\n    if (contactGroups.length) {\n      await dispatch(updateContactInGroups(editedContact));\n    }\n  };\n\n  return contact ? (\n    <>\n      <AppBar />\n      <Main>\n        <Section>\n          <ContentWrapper>\n            <BackButton pathTo={backLinkHref} />\n            <ContactEditInfoBlock contact={contact} />\n            <ContactForm\n              action={CONTACT_ACTIONS.EDIT}\n              contact={contact}\n              onSubmit={successEditContact}\n            />\n          </ContentWrapper>\n        </Section>\n      </Main>\n    </>\n  ) : (\n    <Loader />\n  );\n};\n\nexport default EditContact;\n"],"names":["location","useLocation","dispatch","useDispatch","contactId","useParams","navigate","useNavigate","allContacts","useSelector","selectContacts","favoriteContacts","selectFavoritesContacts","groups","selectGroups","contact","getContactById","contacts","useEffect","fetchContacts","backLinkHref","state","from","ROUTES","successEditContact","updatedContact","handleFavoriteContactUpdate","handleGroupsUpdate","showEditContactSuccess","editedContact","isContactInFavorites","updateFavoriteContact","findGroupsForContact","length","updateContactInGroups","pathTo","action","CONTACT_ACTIONS","onSubmit"],"sourceRoot":""}