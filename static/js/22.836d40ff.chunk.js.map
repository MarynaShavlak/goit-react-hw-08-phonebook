{"version":3,"file":"static/js/22.836d40ff.chunk.js","mappings":"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","sources":["components/AppBar/AppBar.styled.jsx","components/AppBar/AppBar.jsx","components/Form/Form.styled.jsx","pages/Contacts/Contacts.styled.jsx","pages/ManageGroupMember/ManageGroupMember.styled.jsx","pages/ManageGroupMember/ManageGroupMember.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Header = styled.header`\n  border-bottom: 4px solid #fc458e;\n  /* margin-bottom: 30px; */\n`;\n\nexport const StyledAppBar = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  @media screen and (max-width: 767px) {\n    column-gap: 20px;\n  }\n  @media screen and (min-width: ${props => props.theme.devices.tablet}) {\n    justify-content: space-between;\n  }\n  margin: 0 auto;\n  padding-left: 15px;\n  padding-right: 15px;\n`;\n","import { Navigation, UserMenu } from 'components';\nimport { Header } from './AppBar.styled';\nimport { StyledAppBar } from './AppBar.styled';\nimport { useAuth } from 'hooks';\n\nexport const AppBar = () => {\n  const { isLoggedIn } = useAuth();\n  return (\n    <>\n      <Header>\n        <StyledAppBar>\n          <Navigation />\n          {isLoggedIn && <UserMenu />}\n        </StyledAppBar>\n      </Header>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport PhoneInput from 'react-phone-number-input';\n\nexport const Form = styled.form`\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  row-gap: 30px;\n`;\nexport const FormList = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  row-gap: 25px;\n`;\n\nexport const FormItem = styled.li`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  row-gap: 8px;\n  label {\n    font-size: 14px;\n    @media screen and (min-width: ${props => props.theme.devices.tablet}) {\n      font-size: 16px;\n    }\n    font-weight: 700;\n  }\n`;\n\nexport const Name = styled.input`\n  width: 100%;\n  padding-left: 20px;\n  font-size: 14px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  @media screen and (min-width: ${props => props.theme.devices.tablet}) {\n    font-size: 16px;\n  }\n  font-weight: 600;\n  line-height: 1.5;\n  color: #f66fa5;\n  border: 3px solid #fab7d2;\n  border-radius: 10px;\n  &:focus {\n    outline: none;\n    border: 3px solid #f787b4;\n  }\n`;\n\nexport const BackButton = styled(NavLink)`\n  button {\n    display: flex;\n    align-self: center;\n    align-items: center;\n    background-color: transparent;\n    color: black;\n    border: none;\n    cursor: pointer;\n    transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),\n      color 300ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover {\n      color: #f787b4;\n    }\n  }\n\n  svg {\n    width: 30px;\n    height: 30px;\n    @media screen and (min-width: ${props => props.theme.devices.tablet}) {\n      width: 50px;\n      height: 50px;\n    }\n  }\n`;\n\nexport const Phone = styled(PhoneInput)`\n  width: 100%;\n  padding-left: 20px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  border: 3px solid #fab7d2;\n  border-radius: 10px;\n\n  &.PhoneInput--focus {\n    outline: none;\n    border: 3px solid #f787b4;\n  }\n\n  .PhoneInputCountryIcon {\n    height: 20px;\n    width: auto;\n  }\n  .PhoneInputCountryIcon--border {\n    box-shadow: none;\n    border: 1px solid black;\n  }\n\n  .PhoneInputCountrySelect:focus + .PhoneInputCountryIcon--border {\n    box-shadow: none;\n  }\n\n  .PhoneInputCountrySelectArrow {\n    color: black;\n  }\n\n  .PhoneInputCountrySelect:focus\n    + .PhoneInputCountryIcon\n    + .PhoneInputCountrySelectArrow {\n    opacity: 1;\n    color: #f66fa5;\n  }\n  .PhoneInputInput {\n    border: none;\n    outline: none;\n    height: 100%;\n    font-size: 14px;\n    font-weight: 600;\n    line-height: 1.5;\n    @media screen and (min-width: ${props => props.theme.devices.tablet}) {\n      font-size: 16px;\n    }\n    color: #f66fa5;\n  }\n\n  .PhoneInputCountrySelect {\n    font-size: 12px;\n    border: none;\n    ::-webkit-scrollbar {\n      width: 6px;\n    }\n    ::-webkit-scrollbar-track {\n      border-radius: 12px;\n      margin-left: 10px;\n      background: #fde7f0;\n    }\n    ::-webkit-scrollbar-thumb {\n      background: #fde7f0;\n      border-radius: 12px;\n      margin-left: 10px;\n    }\n    ::-webkit-scrollbar-thumb:hover {\n      background: #f66fa5;\n    }\n    option {\n      color: black;\n      background-color: #fde7f0;\n    }\n  }\n`;\n\nexport const Error = styled.p`\n  position: absolute;\n  bottom: -25px;\n  @media screen and (min-width: ${props => props.theme.devices.mobile}) {\n    bottom: -15px;\n  }\n  width: 100%;\n  margin: 0;\n  margin-top: 5px;\n  font-size: 10px;\n  font-weight: 700;\n  color: red;\n`;\n","import styled from 'styled-components';\nimport { Container } from 'components/SharedLayout/SharedLayout.styled';\n\nexport const Info = styled.p`\n  font-size: 16px;\n  @media screen and (min-width: ${props => props.theme.devices.tablet}) {\n    font-size: 18px;\n  }\n\n  span {\n    font-weight: 700;\n  }\n`;\nexport const InfoWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid #f787b4;\n  border-top: 1px solid #f787b4;\n`;\nexport const ContentWrapper = styled(Container)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n  padding: 0;\n  min-width: 290px;\n  @media screen and (min-width: ${props => props.theme.devices.mobile}) {\n    width: 345px;\n  }\n  @media screen and (min-width: ${props => props.theme.devices.tablet}) {\n    width: 700px;\n  }\n  @media screen and (min-width: ${props => props.theme.devices.desktop}) {\n    width: 800px;\n  }\n`;\n\nexport const AddNewContactBtn = styled.button`\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  background-color: #f787b4;\n  border: none;\n  cursor: pointer;\n  transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background-color: #ef4287;\n    color: white;\n  }\n`;\n\nexport const FilterList = styled.ul`\n  display: flex;\n  justify-content: space-between;\n  li {\n    width: calc(50% - 10px);\n  }\n`;\n","import styled from 'styled-components';\n\nexport const GroupsList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const GroupButton = styled.button`\n  display: flex;\n  justify-content: center;\n  padding: 10px 30px;\n  background-color: #fde7f0;\n  color: black;\n  border: 5px solid transparent;\n  border-radius: 10px;\n  font-size: 16px;\n  font-weight: 800;\n  text-transform: uppercase;\n  cursor: pointer;\n  transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background-color: #f787b4;\n    color: white;\n    box-shadow: 5px 5px 8px 1px rgba(112, 111, 111, 1);\n  }\n  &.selected {\n    background-color: #bb6bd9;\n  }\n`;\n\nexport const Text = styled.p`\n  font-size: 14px;\n\n  @media screen and (min-width: ${props => props.theme.devices.tablet}) {\n    font-size: 16px;\n  }\n`;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectGroups } from 'redux/groups';\nimport { useParams } from 'react-router-dom';\nimport Select from 'react-select';\nimport { Section } from 'components';\nimport { selectContacts } from 'redux/contacts';\nimport { deleteContactFromGroup, addContactToGroup } from 'redux/groups';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { ContentWrapper } from 'pages/Contacts/Contacts.styled';\nimport {\n  GroupsList,\n  GroupButton,\n} from 'components/AddContactToGroupModal/AddContactToGroupModal.styled';\nimport { Text } from './ManageGroupMember.styled';\nimport { BackButton } from 'components/Form/Form.styled';\nimport { renderIcons, convertHyphenatedString } from 'utils/';\nimport { AppBar } from 'components/AppBar/AppBar';\n\nconst ManageGroupMember = () => {\n  const dispatch = useDispatch();\n  const { groupName } = useParams();\n\n  const allContacts = useSelector(selectContacts);\n  const groups = useSelector(selectGroups);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const choseContactToAddInGroup = contact => {\n    setContactsToAdd(prevContacts => [...prevContacts, contact]);\n    dispatch(addContactToGroup({ group: originalGroupName, contact }));\n  };\n\n  const getContactsByGroupName = ({ groupName, groups }) => {\n    const convertedName = convertHyphenatedString(groupName);\n    return groups.find(group => group.name.toLowerCase() === convertedName)\n      .contacts;\n  };\n\n  const getContactsToSelect = ({ contactsInGroup, allContacts }) => {\n    const contactIds = new Set(contactsInGroup.map(c => c.id));\n    return allContacts.filter(c => !contactIds.has(c.id));\n  };\n  const getOriginalGroupName = groupName => {\n    const convertedName = convertHyphenatedString(groupName);\n    return groups.find(group => group.name.toLowerCase() === convertedName)\n      .name;\n  };\n  const handleContactClick = contact => {\n    const isSelected = contactsToAdd.map(el => el.id).includes(contact.id);\n\n    if (isSelected) {\n      setContactsToAdd(contactsToAdd.filter(el => el.id !== contact.id));\n      dispatch(\n        deleteContactFromGroup({\n          group: originalGroupName,\n          contact,\n        })\n      );\n    }\n  };\n\n  const contactsInGroup = useMemo(\n    () => getContactsByGroupName({ groupName, groups }),\n    [groupName, groups]\n  );\n  const contactsToSelect = useMemo(\n    () =>\n      getContactsToSelect({\n        contactsInGroup,\n        allContacts,\n      }),\n    [contactsInGroup, allContacts]\n  );\n  const originalGroupName = useMemo(\n    () => getOriginalGroupName(groupName),\n    // eslint-disable-next-line\n    [groupName]\n  );\n  const [contactsToAdd, setContactsToAdd] = useState(contactsInGroup);\n  const [initialContactsInGroup, setInitialContactsInGroup] = useState([]);\n\n  useEffect(() => {\n    setInitialContactsInGroup(contactsInGroup);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const contactsNames = initialContactsInGroup.map(contact => contact.name);\n\n  const options = contactsToSelect.map(contact => ({\n    label: `${contact.name}: ${contact.number} `,\n    value: contact,\n  }));\n\n  return (\n    <>\n      <AppBar />\n      <main>\n        <Section>\n          <ContentWrapper>\n            <BackButton to=\"/groups\">\n              <button type=\"button\" aria-label=\"Back to previous page\">\n                {renderIcons('back', 50)}\n              </button>\n            </BackButton>\n            <>\n              {!!initialContactsInGroup.length && (\n                <Text>\n                  The following contacts have already been added to the group :{' '}\n                  <b>{contactsNames.join(', ')}</b>\n                </Text>\n              )}\n\n              <Text>\n                Chose contacts to add to the group <b>\"{originalGroupName}\"</b>\n              </Text>\n              <Select\n                options={options}\n                onChange={option => choseContactToAddInGroup(option.value)}\n              />\n              {!!contactsToAdd.length && (\n                <GroupsList>\n                  {contactsToAdd.map(contact => (\n                    <li key={contact.id}>\n                      <GroupButton\n                        type=\"button\"\n                        className={\n                          contactsToAdd.includes(contact) ? 'selected' : ''\n                        }\n                        onClick={() => handleContactClick(contact)}\n                      >\n                        {contact.name}: {contact.number}\n                      </GroupButton>\n                    </li>\n                  ))}\n                </GroupsList>\n              )}\n            </>\n          </ContentWrapper>\n        </Section>\n      </main>\n    </>\n  );\n};\n\nexport default ManageGroupMember;\n"],"names":["Header","styled","StyledAppBar","props","theme","devices","tablet","AppBar","isLoggedIn","useAuth","BackButton","NavLink","PhoneInput","mobile","Info","InfoWrap","ContentWrapper","Container","desktop","AddNewContactBtn","FilterList","Text","dispatch","useDispatch","groupName","useParams","allContacts","useSelector","selectContacts","groups","selectGroups","useEffect","fetchContacts","contactsInGroup","useMemo","convertedName","convertHyphenatedString","find","group","name","toLowerCase","contacts","getContactsByGroupName","contactsToSelect","contactIds","Set","map","c","id","filter","has","getContactsToSelect","originalGroupName","getOriginalGroupName","useState","contactsToAdd","setContactsToAdd","initialContactsInGroup","setInitialContactsInGroup","contactsNames","contact","options","label","number","value","to","type","renderIcons","length","join","onChange","option","prevContacts","addContactToGroup","className","includes","onClick","el","deleteContactFromGroup","handleContactClick"],"sourceRoot":""}